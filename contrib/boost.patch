diff --git a/boost/predef/other/endian.h b/boost/predef/other/endian.h
index b42da538..b82f0c81 100644
--- a/boost/predef/other/endian.h
+++ b/boost/predef/other/endian.h
@@ -127,7 +127,10 @@ information and acquired knowledge:
         defined(__AARCH64EL__) || \
         defined(_MIPSEL) || \
         defined(__MIPSEL) || \
-        defined(__MIPSEL__)
+        defined(__MIPSEL__) || \
+        defined(__loongarch64) || \
+        defined(__riscv) || \
+        defined(__e2k__)
 #       undef BOOST_ENDIAN_LITTLE_BYTE
 #       define BOOST_ENDIAN_LITTLE_BYTE BOOST_VERSION_NUMBER_AVAILABLE
 #   endif
diff --git a/libs/context/src/asm/jump_loongarch64_lp64_elf_gas.S b/libs/context/src/asm/jump_loongarch64_lp64_elf_gas.S
new file mode 100644
index 00000000..89b23c7f
--- /dev/null
+++ b/libs/context/src/asm/jump_loongarch64_lp64_elf_gas.S
@@ -0,0 +1,77 @@
+/*
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+
+.file "jump_loongarch64_lp64_elf_gas.S"
+.text
+.globl jump_fcontext
+.align 3
+.type jump_fcontext,@function
+jump_fcontext:
+	# reserve space on stack
+	addi.d	$sp, $sp, -160
+
+	st.d	$s0, $sp, 64	# save S0
+	st.d	$s1, $sp, 72	# save S1
+	st.d	$s2, $sp, 80	# save S2
+	st.d	$s3, $sp, 88	# save S3
+	st.d	$s4, $sp, 96	# save S4
+	st.d	$s5, $sp, 104	# save S5
+	st.d	$s6, $sp, 112	# save S6
+	st.d	$s7, $sp, 120	# save S7
+	st.d	$s8, $sp, 128	# save S8
+	st.d	$fp, $sp, 136	# save FP
+	st.d	$ra, $sp, 144	# save RA
+	st.d	$ra, $sp, 152	# save RA as PC
+
+
+	fst.d	$fs0, $sp, 0	# save F24
+	fst.d	$fs1, $sp, 8	# save F25
+	fst.d	$fs2, $sp, 16	# save F26
+	fst.d	$fs3, $sp, 24	# save F27
+	fst.d	$fs4, $sp, 32	# save F28
+	fst.d	$fs5, $sp, 40	# save F29
+	fst.d	$fs6, $sp, 48	# save F30
+	fst.d	$fs7, $sp, 56	# save F31
+
+	# swap a0(new stack), sp(old stack)
+	xor	$a0, $a0, $sp
+	xor	$sp, $a0, $sp
+	xor	$a0, $a0, $sp
+
+	fld.d	$fs0, $sp, 0	# restore F24
+	fld.d	$fs1, $sp, 8	# restore F25
+	fld.d	$fs2, $sp, 16	# restore F26
+	fld.d	$fs3, $sp, 24	# restore F27
+	fld.d	$fs4, $sp, 32	# restore F28
+	fld.d	$fs5, $sp, 40	# restore F29
+	fld.d	$fs6, $sp, 48	# restore F30
+	fld.d	$fs7, $sp, 56	# restore F31
+
+	ld.d	$s0, $sp, 64	# restore S0
+	ld.d	$s1, $sp, 72	# restore S1
+	ld.d	$s2, $sp, 80	# restore S2
+	ld.d	$s3, $sp, 88	# restore S3
+	ld.d	$s4, $sp, 96	# restore S4
+	ld.d	$s5, $sp, 104	# restore S5
+	ld.d	$s6, $sp, 112	# restore S6
+	ld.d	$s7, $sp, 120	# restore S7
+	ld.d	$s8, $sp, 128	# restore S8
+	ld.d	$fp, $sp, 136	# restore FP
+	ld.d	$ra, $sp, 144	# restore RA
+
+	# load PC
+	ld.d	$t8, $sp, 152
+
+	# adjust stack
+	addi.d	$sp, $sp, 160
+
+	# jump to context
+	jr	$t8
+.size jump_fcontext, .-jump_fcontext
+
+/* Mark that we don't need executable stack.  */
+.section .note.GNU-stack,"",%progbits
diff --git a/libs/context/src/asm/make_loongarch64_lp64_elf_gas.S b/libs/context/src/asm/make_loongarch64_lp64_elf_gas.S
new file mode 100644
index 00000000..1b01b9da
--- /dev/null
+++ b/libs/context/src/asm/make_loongarch64_lp64_elf_gas.S
@@ -0,0 +1,43 @@
+/*
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+.file "make_loongarch64_lp64_elf_gas.S"
+.text
+.globl make_fcontext
+.align 3
+.type make_fcontext,@function
+make_fcontext:
+	# shift address in A0 to lower 16 byte boundary
+    bstrins.d $a0, $r0, 3, 0
+
+	# reserve space for context-data on context-stack
+	addi.d	$a0, $a0, -160
+
+	# third arg of make_fcontext() == address of context-function
+	st.d	$a2, $a0, 152
+
+	# save address of finish as return-address for context-function
+	# will be entered after context-function returns
+	la.local	$t8, finish	
+	st.d	$t8, $a0, 144
+
+	# return pointer to context-data
+	jr	$ra 
+
+finish:
+	# reload our gp register (needed for la)
+	addi.d	$t0, $sp, -160
+
+	# call _exit(0)
+	#  the previous function should have left the 16 bytes incoming argument
+	#  area on the stack which we reuse for calling _exit
+	la.global	$t8, _exit
+	move	$a0, $zero
+	jr	$t8
+.size make_fcontext, .-make_fcontext
+
+/* Mark that we don't need executable stack.  */
+.section .note.GNU-stack,"",%progbits
diff --git a/libs/context/src/asm/ontop_loongarch64_lp64_elf_gas.S b/libs/context/src/asm/ontop_loongarch64_lp64_elf_gas.S
new file mode 100644
index 00000000..7f1c2cac
--- /dev/null
+++ b/libs/context/src/asm/ontop_loongarch64_lp64_elf_gas.S
@@ -0,0 +1,76 @@
+/*
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE
+*/
+
+.file "ontop_loongarch64_lp64_elf_gas.S"
+.text
+.globl ontop_fcontext
+.align 3
+.type ontop_fcontext,@function
+ontop_fcontext:
+	# reserve space on stack
+	addi.d	$sp, $sp, -160
+
+	st.d	$s0, $sp, 64	# save S0
+	st.d	$s1, $sp, 72	# save S1
+	st.d	$s2, $sp, 80	# save S2
+	st.d	$s3, $sp, 88	# save S3
+	st.d	$s4, $sp, 96	# save S4
+	st.d	$s5, $sp, 104	# save S5
+	st.d	$s6, $sp, 112	# save S6
+	st.d	$s7, $sp, 120	# save S7
+	st.d	$s8, $sp, 128	# save S8
+	st.d	$fp, $sp, 136	# save FP
+	st.d	$ra, $sp, 144	# save RA
+	st.d	$ra, $sp, 152	# save RA as PC
+
+
+	fst.d	$fs0, $sp, 0		# save F24
+	fst.d	$fs1, $sp, 8		# save F25
+	fst.d	$fs2, $sp, 16	# save F26
+	fst.d	$fs3, $sp, 24	# save F27
+	fst.d	$fs4, $sp, 32	# save F28
+	fst.d	$fs5, $sp, 40	# save F29
+	fst.d	$fs6, $sp, 48	# save F30
+	fst.d	$fs7, $sp, 56	# save F31
+
+	# swap a0,sp
+	xor	$a0, $a0, $sp
+	xor	$sp, $a0, $sp
+	xor	$a0, $a0, $sp
+
+	fld.d	$fs0, $sp, 0	# restore F24
+	fld.d	$fs1, $sp, 8	# restore F25
+	fld.d	$fs2, $sp, 16	# restore F26
+	fld.d	$fs3, $sp, 24	# restore F27
+	fld.d	$fs4, $sp, 32	# restore F28
+	fld.d	$fs5, $sp, 40	# restore F29
+	fld.d	$fs6, $sp, 48	# restore F30
+	fld.d	$fs7, $sp, 56	# restore F31
+
+	ld.d	$s0, $sp, 64	# restore S0
+	ld.d	$s1, $sp, 72	# restore S1
+	ld.d	$s2, $sp, 80	# restore S2
+	ld.d	$s3, $sp, 88	# restore S3
+	ld.d	$s4, $sp, 96	# restore S4
+	ld.d	$s5, $sp, 104	# restore S5
+	ld.d	$s6, $sp, 112	# restore S6
+	ld.d	$s7, $sp, 120	# restore S7
+	ld.d	$s8, $sp, 128	# restore S8
+	ld.d	$fp, $sp, 136	# restore FP
+	ld.d	$ra, $sp, 144	# restore RA
+
+	# load PC
+	move	$t8, $a2
+
+	# adjust stack
+	addi.d	$sp, $sp, 160
+
+	# jump to context
+	jr	$t8
+.size ontop_fcontext, .-ontop_fcontext
+
+/* Mark that we don't need executable stack.  */
+.section .note.GNU-stack,"",%progbits
